// ===== CONFIGURACI√ìN EMAILJS FINAL CORRECTA =====
const EMAILJS_CONFIG = {
    publicKey: "vCEpn-B_Inhh-QqeM",          // ‚úÖ Correcto
    serviceId: "service_p9efz9f",             // ‚úÖ CORREGIDO - Exacto de tu dashboard
    templateId: "template_ho27i8c"            // ‚úÖ Correcto - Exacto de tu dashboard
};

// ===== INICIALIZACI√ìN =====
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ === IBT Business School - Sistema de Formulario FINAL ===');
    console.log('üìã Configuraci√≥n EmailJS DEFINITIVA:', EMAILJS_CONFIG);
    
    // Verificar que EmailJS est√© disponible
    if (typeof emailjs === 'undefined') {
        console.error('‚ùå EmailJS no est√° cargado!');
        return;
    }
    
    // Inicializar EmailJS
    try {
        emailjs.init({ publicKey: EMAILJS_CONFIG.publicKey });
        console.log('‚úÖ EmailJS inicializado correctamente');
        console.log('üîß Service ID CORRECTO:', EMAILJS_CONFIG.serviceId);
        console.log('üìß Template ID CORRECTO:', EMAILJS_CONFIG.templateId);
    } catch (error) {
        console.error('‚ùå Error inicializando EmailJS:', error);
        return;
    }
    
    // Configurar el formulario
    setupForm();
});

// ===== CONFIGURACI√ìN DEL FORMULARIO =====
function setupForm() {
    const form = document.getElementById('contact-form');
    
    if (!form) {
        console.error('‚ùå Formulario no encontrado');
        return;
    }
    
    console.log('üìù Formulario encontrado, configurando evento...');
    
    // Evento de env√≠o del formulario
    form.addEventListener('submit', async function(event) {
        event.preventDefault();
        console.log('üì§ === ENV√çO DE FORMULARIO INICIADO ===');
        console.log('üéØ Service ID:', EMAILJS_CONFIG.serviceId);
        console.log('üìß Template ID:', EMAILJS_CONFIG.templateId);
        
        // Verificar honeypot
        const honeypot = form.querySelector('[name="bot-field"]');
        if (honeypot && honeypot.value) {
            console.log('üö´ Spam detectado');
            return;
        }
        
        // Obtener datos del formulario
        const formData = {
            client_name: form.client_name.value.trim(),
            client_email: form.client_email.value.trim(),
            client_phone: form.client_phone.value.trim(),
            client_occupation: form.client_occupation.value,
            client_city: form.client_city.value.trim()
        };
        
        console.log('üìä Datos capturados del formulario:', formData);
        
        // Validar campos obligatorios
        if (!formData.client_name || !formData.client_email || !formData.client_occupation || !formData.client_city) {
            alert('Por favor, completa todos los campos obligatorios.');
            console.log('‚ùå Validaci√≥n fall√≥ - campos vac√≠os');
            return;
        }
        
        // Validar formato de email
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(formData.client_email)) {
            alert('Por favor, ingresa un email v√°lido.');
            console.log('‚ùå Email inv√°lido:', formData.client_email);
            return;
        }
        
        console.log('‚úÖ Validaci√≥n exitosa - iniciando env√≠o');
        
        // Mostrar estado de carga
        showLoading(true);
        
        try {
            // Preparar datos para el template
            const templateParams = {
                // Variables principales que usa tu template
                name: formData.client_name,
                email: formData.client_email,
                message: `üéì NUEVA SOLICITUD - IBT BUSINESS SCHOOL

üë§ INFORMACI√ìN DEL CLIENTE:
‚ñ™Ô∏è Nombre: ${formData.client_name}
‚ñ™Ô∏è Email: ${formData.client_email}
‚ñ™Ô∏è Tel√©fono: ${formData.client_phone}
‚ñ™Ô∏è Ocupaci√≥n: ${formData.client_occupation}
‚ñ™Ô∏è Ciudad: ${formData.client_city}

üíº SOLICITUD:
El cliente est√° interesado en conocer m√°s sobre las oportunidades en Inteligencia Artificial para emprendedores y desea recibir la gu√≠a gratuita "¬øQuieres Trabajar en la Inteligencia Artificial?".

üìÖ INFORMACI√ìN DEL SISTEMA:
‚ñ™Ô∏è Fecha y hora: ${new Date().toLocaleString('es-EC', { 
    timeZone: 'America/Guayaquil',
    year: 'numeric',
    month: 'long', 
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
})}
‚ñ™Ô∏è Fuente: Landing Page IBT Business School
‚ñ™Ô∏è Estado: NUEVO LEAD - ALTA PRIORIDAD

üéØ ACCI√ìN REQUERIDA:
Contactar al cliente en las pr√≥ximas 24 horas para:
‚Ä¢ Env√≠o de gu√≠a de IA
‚Ä¢ Seguimiento comercial
‚Ä¢ Informaci√≥n sobre programas`,
                
                time: new Date().toLocaleString('es-EC', { 
                    timeZone: 'America/Guayaquil'
                })
            };
            
            console.log('üìß Enviando email con EmailJS...');
            console.log('üì® Par√°metros del template:', templateParams);
            
            // Enviar con EmailJS usando credenciales correctas
            const response = await emailjs.send(
                EMAILJS_CONFIG.serviceId,    // service_p9efz9f
                EMAILJS_CONFIG.templateId,   // template_ho27i8c
                templateParams
            );
            
            console.log('‚úÖ ¬°EMAIL ENVIADO EXITOSAMENTE!', response);
            console.log('üìä Detalles de la respuesta:');
            console.log('  - Status:', response.status);
            console.log('  - Text:', response.text);
            console.log('üìß Email enviado a jonimates2000@gmail.com');
            
            // Mostrar mensaje de √©xito
            showSuccess();
            
            // Limpiar formulario
            form.reset();
            
        } catch (error) {
            console.error('‚ùå === ERROR AL ENVIAR EMAIL ===');
            console.error('üìÑ Error completo:', error);
            console.error('üìä Detalles:');
            console.error('  - Status:', error.status);
            console.error('  - Text:', error.text);
            console.error('  - Message:', error.message);
            
            // An√°lisis detallado del error
            if (error.status === 400) {
                console.error('üö® ERROR 400 - Bad Request');
                if (error.text && error.text.includes('service ID not found')) {
                    console.error('‚ùå SERVICE ID INCORRECTO');
                    console.error('üîß Service ID usado:', EMAILJS_CONFIG.serviceId);
                    console.error('üìù Verifica en: https://dashboard.emailjs.com/admin/email');
                    alert('‚ùå Service ID incorrecto. Contacta al administrador.');
                } else if (error.text && error.text.includes('template')) {
                    console.error('‚ùå TEMPLATE ID INCORRECTO');
                    console.error('üìß Template ID usado:', EMAILJS_CONFIG.templateId);
                    alert('‚ùå Template ID incorrecto. Contacta al administrador.');
                } else {
                    console.error('‚ùå Otro error 400:', error.text);
                    alert('‚ùå Error en los datos enviados. Contacta al administrador.');
                }
            } else if (error.status === 401) {
                console.error('üö® ERROR 401 - No autorizado');
                console.error('‚ùå PUBLIC KEY INCORRECTO:', EMAILJS_CONFIG.publicKey);
                alert('‚ùå Error de autorizaci√≥n. Contacta al administrador.');
            } else if (error.status === 404) {
                console.error('üö® ERROR 404 - No encontrado');
                alert('‚ùå Servicio no encontrado. Contacta al administrador.');
            } else {
                console.error('üö® ERROR DESCONOCIDO');
                alert('‚ùå Error desconocido. Contacta al administrador.');
            }
            
            // Intentar env√≠o a Netlify como respaldo
            try {
                console.log('üîÑ === INTENTANDO RESPALDO CON NETLIFY ===');
                
                const formDataNetlify = new FormData(form);
                const netlifResponse = await fetch('/', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    body: new URLSearchParams(formDataNetlify).toString()
                });
                
                if (netlifResponse.ok) {
                    console.log('‚úÖ Datos enviados a Netlify exitosamente');
                    showSuccess();
                    form.reset();
                } else {
                    throw new Error(`Error Netlify: ${netlifResponse.status}`);
                }
                
            } catch (netlifyError) {
                console.error('‚ùå Error total - EmailJS y Netlify fallaron:', netlifyError);
                showError();
            }
        } finally {
            showLoading(false);
        }
    });
    
    console.log('‚úÖ Formulario configurado correctamente');
}

// ===== FUNCIONES DE INTERFAZ =====
function showLoading(show) {
    const loadingMessage = document.getElementById('loadingMessage');
    const submitBtn = document.getElementById('submit-btn');
    const btnText = submitBtn.querySelector('.btn-text');
    const btnLoading = document.getElementById('btn-loading');
    
    if (show) {
        if (loadingMessage) loadingMessage.style.display = 'block';
        submitBtn.disabled = true;
        if (btnText) btnText.style.display = 'none';
        if (btnLoading) btnLoading.style.display = 'inline';
        submitBtn.style.opacity = '0.7';
        console.log('‚è≥ Mostrando estado de carga');
    } else {
        if (loadingMessage) loadingMessage.style.display = 'none';
        submitBtn.disabled = false;
        if (btnText) btnText.style.display = 'inline';
        if (btnLoading) btnLoading.style.display = 'none';
        submitBtn.style.opacity = '1';
        console.log('üîÑ Ocultando estado de carga');
    }
}

function showSuccess() {
    const successMessage = document.getElementById('successMessage');
    const errorMessage = document.getElementById('errorMessage');
    const form = document.getElementById('contact-form');
    
    if (successMessage) successMessage.style.display = 'block';
    if (errorMessage) errorMessage.style.display = 'none';
    if (form) form.style.display = 'none';
    
    console.log('üéâ Mostrando mensaje de √©xito');
    
    // Scroll al mensaje de √©xito
    if (successMessage) {
        successMessage.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }
    
    // Redirigir a p√°gina de √©xito despu√©s de 4 segundos
    setTimeout(() => {
        console.log('üîÑ Redirigiendo a p√°gina de √©xito');
        window.location.href = './success.html';
    }, 4000);
}

function showError() {
    const errorMessage = document.getElementById('errorMessage');
    const successMessage = document.getElementById('successMessage');
    
    if (errorMessage) errorMessage.style.display = 'block';
    if (successMessage) successMessage.style.display = 'none';
    
    console.log('‚ùå Mostrando mensaje de error');
    
    // Scroll al mensaje de error
    if (errorMessage) {
        errorMessage.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }
}

// ===== FUNCIONES DE DEBUG Y TESTING =====
window.IBTDebug = {
    // Test inmediato con credenciales correctas
    testEmailJS: function() {
        console.log('üß™ === TEST EMAILJS CON CREDENCIALES CORRECTAS ===');
        console.log('üîß Service ID:', EMAILJS_CONFIG.serviceId);
        console.log('üìß Template ID:', EMAILJS_CONFIG.templateId);
        console.log('üîë Public Key:', EMAILJS_CONFIG.publicKey);
        
        if (typeof emailjs === 'undefined') {
            console.error('‚ùå EmailJS no disponible');
            return;
        }
        
        const testParams = {
            name: "Test Usuario Final IBT",
            email: "test@example.com",
            message: `üß™ TEST FINAL DEL FORMULARIO IBT BUSINESS SCHOOL

Este es un email de prueba para verificar que el sistema de EmailJS est√° funcionando correctamente con las credenciales exactas del dashboard.

‚úÖ Service ID: ${EMAILJS_CONFIG.serviceId}
‚úÖ Template ID: ${EMAILJS_CONFIG.templateId}
‚úÖ Timestamp: ${new Date().toLocaleString('es-EC')}

Si recibes este email, ¬°el sistema est√° funcionando perfectamente!`,
            time: new Date().toLocaleString('es-EC', { timeZone: 'America/Guayaquil' })
        };
        
        console.log('üì§ Enviando email de prueba...');
        console.log('üì® Par√°metros:', testParams);
        
        emailjs.send(EMAILJS_CONFIG.serviceId, EMAILJS_CONFIG.templateId, testParams)
            .then(response => {
                console.log('‚úÖ ¬°TEST EXITOSO!', response);
                alert('‚úÖ ¬°Email de prueba enviado exitosamente! Revisa jonimates2000@gmail.com');
            })
            .catch(error => {
                console.error('‚ùå Test fall√≥:', error);
                console.error('üìÑ Detalles:', {
                    status: error.status,
                    text: error.text,
                    message: error.message
                });
                alert('‚ùå Test fall√≥. Revisa la consola para detalles.');
            });
    },
    
    // Verificar configuraci√≥n actual
    checkConfig: function() {
        console.log('üîç === VERIFICACI√ìN DE CONFIGURACI√ìN ===');
        console.log('üìß EmailJS disponible:', typeof emailjs !== 'undefined');
        console.log('üîë Public Key:', EMAILJS_CONFIG.publicKey);
        console.log('üîß Service ID:', EMAILJS_CONFIG.serviceId);
        console.log('üìß Template ID:', EMAILJS_CONFIG.templateId);
        console.log('üìù Formulario encontrado:', document.getElementById('contact-form') !== null);
        
        // Verificar campos del formulario
        const fields = ['client_name', 'client_email', 'client_phone', 'client_occupation', 'client_city'];
        console.log('üîç Campos del formulario:');
        fields.forEach(field => {
            const element = document.getElementById(field);
            console.log(`  ${field}:`, element ? '‚úÖ OK' : '‚ùå No encontrado');
        });
    },
    
    // Simular env√≠o completo del formulario
    simulateFormSubmit: function() {
        console.log('üìù === SIMULANDO ENV√çO COMPLETO ===');
        
        // Llenar formulario autom√°ticamente
        document.getElementById('client_name').value = "Usuario de Prueba IBT";
        document.getElementById('client_email').value = "prueba@ibtsistemas.com";
        document.getElementById('client_phone').value = "+593987654321";
        document.getElementById('client_occupation').value = "emprendedor";
        document.getElementById('client_city').value = "Quito";
        
        console.log('‚úÖ Formulario llenado autom√°ticamente');
        
        // Simular env√≠o
        const form = document.getElementById('contact-form');
        const submitEvent = new Event('submit', { cancelable: true, bubbles: true });
        form.dispatchEvent(submitEvent);
        
        console.log('üöÄ Evento de env√≠o simulado');
    }
};

// ===== LOGS DE INICIALIZACI√ìN =====
console.log('‚úÖ === SCRIPT IBT BUSINESS SCHOOL CARGADO ===');
console.log('üéØ Versi√≥n: FINAL DEFINITIVA');
console.log('üìã Credenciales: VERIFICADAS');
console.log('üõ†Ô∏è Comandos de debug disponibles:');
console.log('  ‚Ä¢ IBTDebug.testEmailJS() - Test directo de EmailJS');
console.log('  ‚Ä¢ IBTDebug.checkConfig() - Verificar configuraci√≥n');
console.log('  ‚Ä¢ IBTDebug.simulateFormSubmit() - Simular env√≠o completo');
console.log('üìß Emails se env√≠an a: jonimates2000@gmail.com');
console.log('üöÄ ¬°Sistema listo para funcionar!');