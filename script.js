// ===== CONFIGURACI√ìN EMAILJS FINAL =====
const EMAILJS_CONFIG = {
    publicKey: "vCEpn-B_Inhh-QqeM",          
    serviceId: "service_p9efz9f",             
    templateId: "template_ho27i8c"            
};

// ===== INICIALIZACI√ìN =====
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ === IBT Business School - Sistema con Captura de Datos ===');
    console.log('üìã Configuraci√≥n EmailJS:', EMAILJS_CONFIG);
    
    // Verificar que EmailJS est√© disponible
    if (typeof emailjs === 'undefined') {
        console.error('‚ùå EmailJS no est√° cargado!');
        return;
    }
    
    // Inicializar EmailJS
    try {
        emailjs.init({ publicKey: EMAILJS_CONFIG.publicKey });
        console.log('‚úÖ EmailJS inicializado correctamente');
    } catch (error) {
        console.error('‚ùå Error inicializando EmailJS:', error);
        return;
    }
    
    // Configurar el formulario
    setupForm();
});

// ===== CONFIGURACI√ìN DEL FORMULARIO =====
function setupForm() {
    const form = document.getElementById('contact-form');
    
    if (!form) {
        console.error('‚ùå Formulario no encontrado');
        return;
    }
    
    console.log('üìù Formulario encontrado, configurando evento...');
    
    // Evento de env√≠o del formulario
    form.addEventListener('submit', async function(event) {
        event.preventDefault();
        console.log('üì§ === ENV√çO DE FORMULARIO INICIADO ===');
        
        // Verificar honeypot
        const honeypot = form.querySelector('[name="bot-field"]');
        if (honeypot && honeypot.value) {
            console.log('üö´ Spam detectado');
            return;
        }
        
        // CAPTURA CORRECTA DE DATOS DEL FORMULARIO
        const clientName = document.getElementById('client_name').value.trim();
        const clientEmail = document.getElementById('client_email').value.trim();
        const clientPhone = document.getElementById('client_phone').value.trim();
        const clientOccupation = document.getElementById('client_occupation').value;
        const clientCity = document.getElementById('client_city').value.trim();
        
        console.log('üìä === DATOS CAPTURADOS DEL FORMULARIO ===');
        console.log('üë§ Nombre:', clientName);
        console.log('üìß Email:', clientEmail);
        console.log('üì± Tel√©fono:', clientPhone);
        console.log('üíº Ocupaci√≥n:', clientOccupation);
        console.log('üèôÔ∏è Ciudad:', clientCity);
        
        // Validar campos obligatorios
        if (!clientName || !clientEmail || !clientOccupation || !clientCity) {
            alert('Por favor, completa todos los campos obligatorios.');
            console.log('‚ùå Validaci√≥n fall√≥ - campos vac√≠os');
            return;
        }
        
        // Validar formato de email
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(clientEmail)) {
            alert('Por favor, ingresa un email v√°lido.');
            console.log('‚ùå Email inv√°lido:', clientEmail);
            return;
        }
        
        console.log('‚úÖ Validaci√≥n exitosa - enviando datos');
        
        // Mostrar estado de carga
        showLoading(true);
        
        try {
            // MAPEO CORRECTO DE VARIABLES PARA EL TEMPLATE
            const templateParams = {
                // Variables principales del template original
                name: clientName,                    // {{name}} en el template
                email: clientEmail,                  // {{email}} en el template  
                message: `üéì NUEVA SOLICITUD - IBT BUSINESS SCHOOL

üìã INFORMACI√ìN COMPLETA DEL CLIENTE:

üë§ Nombre: ${clientName}
üìß Email: ${clientEmail}
üì± Tel√©fono: ${clientPhone || 'No proporcionado'}
üíº Ocupaci√≥n: ${clientOccupation}
üèôÔ∏è Ciudad: ${clientCity}

üìö SOLICITUD:
El cliente est√° interesado en conocer m√°s sobre las oportunidades en Inteligencia Artificial para emprendedores y desea recibir la gu√≠a gratuita "¬øQuieres Trabajar en la Inteligencia Artificial?".

üìÖ INFORMACI√ìN DEL SISTEMA:
‚Ä¢ Fecha: ${new Date().toLocaleDateString('es-EC')}
‚Ä¢ Hora: ${new Date().toLocaleTimeString('es-EC')}
‚Ä¢ Fuente: Landing Page IBT Business School
‚Ä¢ Estado: NUEVO LEAD - ALTA PRIORIDAD

üéØ ACCI√ìN REQUERIDA:
Contactar al cliente en las pr√≥ximas 24 horas para:
‚úÖ Env√≠o de gu√≠a de IA
‚úÖ Seguimiento comercial  
‚úÖ Informaci√≥n sobre programas

üí¨ CONTACTO PREFERIDO: ${clientPhone ? 'WhatsApp/Tel√©fono' : 'Email'}`,

                time: new Date().toLocaleString('es-EC', { 
                    timeZone: 'America/Guayaquil',
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric', 
                    hour: '2-digit',
                    minute: '2-digit'
                }),
                
                // Variables adicionales que podr√≠an usar otros templates
                client_name: clientName,
                client_email: clientEmail,
                client_phone: clientPhone || 'No proporcionado',
                client_occupation: clientOccupation,
                client_city: clientCity,
                client_message: `Solicitud de gu√≠a IA - Ocupaci√≥n: ${clientOccupation}, Ciudad: ${clientCity}`,
                guide_interest: "S√≠",
                contact_preference: clientPhone ? "WhatsApp" : "Email",
                submission_date: new Date().toLocaleString('es-EC'),
                form_source: "IBT Business School - Landing Page"
            };
            
            console.log('üìß === ENVIANDO CON EMAILJS ===');
            console.log('üì® Par√°metros completos:', templateParams);
            
            // Enviar con EmailJS
            const response = await emailjs.send(
                EMAILJS_CONFIG.serviceId,
                EMAILJS_CONFIG.templateId,
                templateParams
            );
            
            console.log('‚úÖ ¬°EMAIL CON DATOS ENVIADO EXITOSAMENTE!', response);
            console.log('üìä Status:', response.status);
            console.log('üìß Email enviado a jonimates2000@gmail.com con todos los datos');
            
            // Mostrar mensaje de √©xito
            showSuccess();
            
            // Limpiar formulario
            form.reset();
            
        } catch (error) {
            console.error('‚ùå === ERROR AL ENVIAR ===');
            console.error('üìÑ Error:', error);
            console.error('üìä Status:', error.status);
            console.error('üìß Text:', error.text);
            
            // Fallback a Netlify
            try {
                console.log('üîÑ === FALLBACK A NETLIFY ===');
                const formDataNetlify = new FormData(form);
                const response = await fetch('/', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    body: new URLSearchParams(formDataNetlify).toString()
                });
                
                if (response.ok) {
                    console.log('‚úÖ Enviado a Netlify exitosamente');
                    showSuccess();
                    form.reset();
                } else {
                    throw new Error(`Netlify Error: ${response.status}`);
                }
            } catch (netlifyError) {
                console.error('‚ùå Error total:', netlifyError);
                showError();
            }
        } finally {
            showLoading(false);
        }
    });
    
    console.log('‚úÖ Formulario configurado correctamente');
}

// ===== FUNCIONES DE INTERFAZ =====
function showLoading(show) {
    const loadingMessage = document.getElementById('loadingMessage');
    const submitBtn = document.getElementById('submit-btn');
    const btnText = submitBtn.querySelector('.btn-text');
    const btnLoading = document.getElementById('btn-loading');
    
    if (show) {
        if (loadingMessage) loadingMessage.style.display = 'block';
        submitBtn.disabled = true;
        if (btnText) btnText.style.display = 'none';
        if (btnLoading) btnLoading.style.display = 'inline';
        submitBtn.style.opacity = '0.7';
        console.log('‚è≥ Mostrando estado de carga');
    } else {
        if (loadingMessage) loadingMessage.style.display = 'none';
        submitBtn.disabled = false;
        if (btnText) btnText.style.display = 'inline';
        if (btnLoading) btnLoading.style.display = 'none';
        submitBtn.style.opacity = '1';
        console.log('üîÑ Ocultando estado de carga');
    }
}

function showSuccess() {
    const successMessage = document.getElementById('successMessage');
    const errorMessage = document.getElementById('errorMessage');
    const form = document.getElementById('contact-form');
    
    if (successMessage) successMessage.style.display = 'block';
    if (errorMessage) errorMessage.style.display = 'none';
    if (form) form.style.display = 'none';
    
    console.log('üéâ Mostrando mensaje de √©xito');
    
    if (successMessage) {
        successMessage.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }
    
    setTimeout(() => {
        console.log('üîÑ Redirigiendo a success.html');
        window.location.href = './success.html';
    }, 4000);
}

function showError() {
    const errorMessage = document.getElementById('errorMessage');
    const successMessage = document.getElementById('successMessage');
    
    if (errorMessage) errorMessage.style.display = 'block';
    if (successMessage) successMessage.style.display = 'none';
    
    console.log('‚ùå Mostrando mensaje de error');
    
    if (errorMessage) {
        errorMessage.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }
}

// ===== FUNCIONES DE DEBUG Y TESTING =====
window.IBTDebug = {
    // Test con datos reales del formulario
    testWithRealData: function() {
        console.log('üß™ === TEST CON DATOS REALES ===');
        
        // Llenar formulario con datos de prueba
        document.getElementById('client_name').value = "Juan Carlos P√©rez";
        document.getElementById('client_email').value = "juan.perez@email.com";
        document.getElementById('client_phone').value = "+593987654321";
        document.getElementById('client_occupation').value = "emprendedor";
        document.getElementById('client_city').value = "Quito";
        
        console.log('‚úÖ Formulario llenado con datos de prueba');
        
        // Obtener datos como lo hace el formulario real
        const clientName = document.getElementById('client_name').value.trim();
        const clientEmail = document.getElementById('client_email').value.trim();
        const clientPhone = document.getElementById('client_phone').value.trim();
        const clientOccupation = document.getElementById('client_occupation').value;
        const clientCity = document.getElementById('client_city').value.trim();
        
        console.log('üìä Datos capturados:');
        console.log('- Nombre:', clientName);
        console.log('- Email:', clientEmail);
        console.log('- Tel√©fono:', clientPhone);
        console.log('- Ocupaci√≥n:', clientOccupation);
        console.log('- Ciudad:', clientCity);
        
        // Preparar par√°metros igual que el formulario
        const testParams = {
            name: clientName,
            email: clientEmail,
            message: `üéì TEST CON DATOS REALES - IBT BUSINESS SCHOOL

üìã INFORMACI√ìN DEL CLIENTE:
üë§ Nombre: ${clientName}
üìß Email: ${clientEmail}
üì± Tel√©fono: ${clientPhone}
üíº Ocupaci√≥n: ${clientOccupation}
üèôÔ∏è Ciudad: ${clientCity}

üß™ Este es un email de prueba con datos reales capturados del formulario.`,
            time: new Date().toLocaleString('es-EC'),
            client_name: clientName,
            client_email: clientEmail,
            client_phone: clientPhone,
            client_occupation: clientOccupation,
            client_city: clientCity
        };
        
        console.log('üì§ Enviando test con datos reales...');
        console.log('üì® Par√°metros:', testParams);
        
        emailjs.send(EMAILJS_CONFIG.serviceId, EMAILJS_CONFIG.templateId, testParams)
            .then(response => {
                console.log('‚úÖ ¬°TEST CON DATOS REALES EXITOSO!', response);
                alert('‚úÖ Email enviado con datos reales. Revisa jonimates2000@gmail.com');
            })
            .catch(error => {
                console.error('‚ùå Test con datos fall√≥:', error);
                alert('‚ùå Test fall√≥. Revisa consola.');
            });
    },
    
    // Verificar campos del formulario
    checkFormFields: function() {
        console.log('üîç === VERIFICACI√ìN DE CAMPOS ===');
        
        const fields = [
            'client_name',
            'client_email', 
            'client_phone',
            'client_occupation',
            'client_city'
        ];
        
        fields.forEach(fieldId => {
            const element = document.getElementById(fieldId);
            if (element) {
                console.log(`‚úÖ ${fieldId}:`, element.value || '(vac√≠o)');
            } else {
                console.log(`‚ùå ${fieldId}: NO ENCONTRADO`);
            }
        });
    },
    
    // Simular env√≠o completo
    simulateFormSubmit: function() {
        console.log('üìù === SIMULANDO ENV√çO COMPLETO ===');
        
        // Llenar formulario
        document.getElementById('client_name').value = "Mar√≠a Gonz√°lez";
        document.getElementById('client_email').value = "maria.gonzalez@empresa.com";
        document.getElementById('client_phone').value = "+593999888777";
        document.getElementById('client_occupation').value = "empresario";
        document.getElementById('client_city').value = "Guayaquil";
        
        console.log('‚úÖ Formulario llenado para simulaci√≥n');
        
        // Disparar evento de env√≠o
        const form = document.getElementById('contact-form');
        const submitEvent = new Event('submit', { cancelable: true, bubbles: true });
        form.dispatchEvent(submitEvent);
        
        console.log('üöÄ Evento de env√≠o disparado');
    }
};

// ===== LOGS DE INICIALIZACI√ìN =====
console.log('‚úÖ === SCRIPT IBT - CAPTURA DE DATOS CORRECTA ===');
console.log('üéØ Versi√≥n: CAPTURA DE DATOS FUNCIONAL');
console.log('üìß Datos se env√≠an a: jonimates2000@gmail.com');
console.log('üõ†Ô∏è Comandos de debug:');
console.log('  ‚Ä¢ IBTDebug.testWithRealData() - Test con datos del formulario');
console.log('  ‚Ä¢ IBTDebug.checkFormFields() - Verificar campos');
console.log('  ‚Ä¢ IBTDebug.simulateFormSubmit() - Simular env√≠o completo');
console.log('üöÄ ¬°Sistema listo para capturar datos correctamente!');